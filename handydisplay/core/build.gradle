plugins {
    id 'application'
    id 'distribution'
    alias(handylibs.plugins.hidetake.ssh)
    alias(handylibs.plugins.kotlin.serialization)
}

dependencies {
    implementation handylibs.picocli
    implementation handylibs.classgraph
    implementation handylibs.hoplite
}

application {
    mainClassName = 'me.genel.handydisplay.core.MainKt'
}

distributions {
//    WithDeployment {
//        distributionBaseName = 'handy_display_zip'
//        // distributionClassifier = 'classifer'
//        contents {
//            from 'deploy/'
//            from jar
//            from dependencies.contents
//        }
//    }
}

def zipNameShort = "core-${version}"
def zipName = "${zipNameShort}.zip"
def zipFileLocal = project.file("build/distributions/${zipName}")

remotes {
    atompi {
        host = ATOMPI_HOST
        user = ATOMPI_USER
        password = ATOMPI_PASS
    }
}

run {
    dependsOn(project(":handydisplay:plugins").tasks.named("build"))
}

tasks.register('deployCoreSSH') {
    ssh.run {
        session(remotes.atompi) {
//            // Make necessary directories ahead of time
//            execute "sudo mkdir -p ${ATOMPI_PATH}/archives/"
//            execute "sudo mkdir -p ${ATOMPI_PATH}/tmp/"
//            // Transfer and unzip distribution into tmp/
//            put from: zipFileLocal, into: "${ATOMPI_PATH}/archives/${zipName}"
//            execute "sudo unzip -o ${ATOMPI_PATH}/archives/${zipName} -d ${ATOMPI_PATH}/tmp"
//            // The ZIP contains a directory, so we need to extract it
//            execute "cp -R ${ATOMPI_PATH}/tmp/${zipNameShort}/* ${ATOMPI_PATH}"
//            execute "sudo rm -r ${ATOMPI_PATH}/tmp"
//
//            put from: project.file("deploy/").getAbsolutePath(), into: "${ATOMPI_PATH}"
        }
    }
}

tasks.register('deployPluginsSSH') {
    doLast {
        println("SSH Deploy >> Deploying to: ${ATOMPI_HOST}")

        ssh.run {
            session(remotes.atompi) {

            }
        }
    }
}